# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: build&test nf.Tarantool 

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4 
  
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v2
  
    - name: Download nanoFramework Build component
      shell: pwsh
      run: Invoke-WebRequest -Uri https://github.com/nanoframework/nf-Visual-Studio-extension/releases/download/v2022.12.1.49/nanoFramework.Tools.VS2022.Extension.vsix -OutFile C:\Temp\nanoFramework.Tools.VS2022.Extension.zip

    - name: UnZip nanoFramework Build component
      shell: pwsh
      run: Expand-Archive -LiteralPath C:\Temp\nanoFramework.Tools.VS2022.Extension.zip -DestinationPath C:\Temp\nf-extension\

    - name: Copy nanoFramework build files to msbuild location
      shell: pwsh
      run: Copy-Item -Path "C:\Temp\nf-extension\`$MSBuild\nanoFramework" -Destination "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild" -Recurse

    - name: Cache nanoFramework NuGet packages
      uses: actions/cache@v4
      with:
        path: ${{ github.workspace }}\packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
            ${{ runner.os }}-nuget-
      
    - name: Restore dependencies
      run: dotnet restore /p:BuildWithNetFrameworkHostedCompiler=true

    - name: Build
      run: msbuild /p:Configuration=Release /p:Platform="Any CPU"
    #- name: Test
    #  run: dotnet test Net.Tarantool.Tests/Net.Tarantool.Tests.csproj --no-build --verbosity normal
